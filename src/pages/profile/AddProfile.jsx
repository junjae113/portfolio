import React, { useEffect, useState } from 'react';
import BasicButton from '../../components/button/BasicButton';
import S from './style';
import Text from '../../components/text/size';
import BasicInput from '../../components/input/BasicInput';
import SelectBox from "../../components/selectBox/SelectBox";
import { Controller, useForm } from 'react-hook-form';
import { useRef } from "react";
import Radio from '../../components/radio/Radio';
import Checkbox from '../../components/checkbox/Checkbox';
import DatePickerSingle from './DatePickerSingle';
import dayjs from 'dayjs';
import { useLocation } from 'react-router-dom';

const AddProfile = ({ onProfileComplete }) => {
    const calendarRef = useRef(null);
    const fileInputRef = useRef(null);
    const location = useLocation();
    
    // React Hook Form ÏÑ§Ï†ï
    const { register, handleSubmit, control, setValue, watch, formState: { isSubmitting } } = useForm({ 
        mode: "onChange" 
    });
    
    // Ìé∏Ïßë Î™®Îìú ÌôïÏù∏
    const isEditMode = location.state?.mode === 'edit';
    const userData = location.state?.userData || {};
    
    // ÏÑ†ÌÉù ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [selectedCharactor, setSelectedCharactor] = useState(1);
    const [selectedFavorite, setSelectedFavorite] = useState([1]);
    const [selectedCautions, setSelectedCautions] = useState([]); // ÏÑ†ÌÉùÏÇ¨Ìï≠Ïù¥ÎØÄÎ°ú Îπà Î∞∞Ïó¥
    const [selectedDate, setSelectedDate] = useState(null);
    const [imageSrc, setImageSrc] = useState('');
    
    // Í≤ÄÏ¶ù ÏÉÅÌÉú
    const [validationErrors, setValidationErrors] = useState({});
    const [hasSubmitted, setHasSubmitted] = useState(false);

    // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
    useEffect(() => {
        if (!isEditMode) {
            // Ïã†Í∑ú Îì±Î°ù Ïãú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
            setValue("charactor", 1);
            setValue("favorites", 1);
            setValue("cautions", []); // ÏÑ†ÌÉùÏÇ¨Ìï≠Ïù¥ÎØÄÎ°ú Îπà Î∞∞Ïó¥
            setValue("gender", "male");
        }
    }, [isEditMode, setValue]);

    // ÌíàÏ¢Ö ÏòµÏÖò
    const BREEDS = [
        "ÎßêÌã∞Ìë∏", "ÏãúÏ∏Ñ", "Í≥®Îì†Î¶¨Ìä∏Î¶¨Î≤Ñ", "Ìë∏Îì§", "Î≥¥ÎçîÏΩúÎ¶¨", "ÎπÑÏàëÌîÑÎ¶¨Ï†ú",
        "Ìè¨Î©îÎùºÎãàÏïà", "Îã•Ïä§ÌõàÌä∏", "ÏπòÏôÄÏôÄ", "ÏöîÌÅ¨ÏÖîÌÖåÎ¶¨Ïñ¥", "Ïù¥ÌÉàÎ¶¨Ïïà Í∑∏Î†àÏù¥ÌïòÏö¥Îìú", "ÌçºÍ∑∏", "Í∏∞ÌÉÄ"
    ];

    // Ï£ºÏÜå Í≤ÄÏÉâ
    const handleSearchAddress = () => {
        new window.daum.Postcode({
            oncomplete: function (data) {
                setValue("address", data.roadAddress);
            },
        }).open();
    };

    // Ïù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù
    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setImageSrc(reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    // ÏÑ±Î≥Ñ ÏÑ†ÌÉù
    const handleGenderClick = (gender) => {
        setValue('gender', gender, { shouldValidate: true });
    };

    // ÏÑ±Í≤© ÏÑ†ÌÉù
    const selectCharactor = (id) => {
        setSelectedCharactor(id);
        setValue("charactor", id, { shouldValidate: true });
    };

    // Ï¢ãÏïÑÌïòÎäî Í≤É ÏÑ†ÌÉù (Îã§Ï§ëÏÑ†ÌÉù)
    const selectFavorite = (id) => {
        setSelectedFavorite((prev) => {
            const updated = prev.includes(id) 
                ? prev.filter((v) => v !== id) 
                : [...prev, id];
            setValue("favorites", updated, { shouldValidate: true });
            return updated;
        });
    };

    // Ï£ºÏùòÌï† Ï†ê ÏÑ†ÌÉù (Îã§Ï§ëÏÑ†ÌÉù)
    const selectCautions = (id) => {
        setSelectedCautions((prev) => {
            const updated = prev.includes(id) 
                ? prev.filter((v) => v !== id) 
                : [...prev, id];
            setValue("cautions", updated, { shouldValidate: true });
            return updated;
        });
    };

    // Ìèº Ï†úÏ∂ú
    const handleFormSubmit = (data) => {
        setHasSubmitted(true);
        
        // Ïà´ÏûêÎ•º Ïã§Ï†ú ÌÉÄÏù¥ÌãÄÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
        const getCharactorTitle = (id) => {
            switch(id) {
                case 1: return "ÎÇòÎäî Í∞úÏù∏Ïã∏! (ÎàÑÍµ¨ÏôÄÎèÑ Ïûò ÏßÄÎÇ¥Ïöî)";
                case 2: return "ÎÇòÎ•º Îî∞Î•¥Îùº! (Í∞ÄÎßåÌûà ÏûàÏßÄ Î™ªÌï¥Ïöî!)";
                case 3: return "ÎÇòÎûëÎßå ÏûàÏñ¥Ï§ò... (Ïï†Ï∞©ÌòïÏù¥Í≥† Ïï†ÍµêÍ∞Ä ÎßéÏïÑÏöî)";
                case 4: return "Ï°∞Í∏à Ï°∞Ïã¨Ïä§ÎüΩÍ∞ú! (ÏàòÏ§çÏùåÏù¥ ÎßéÏïÑÏöî)";
                default: return "";
            }
        };

        const getFavoriteTitle = (id) => {
            switch(id) {
                case 1: return "Í∞ÑÏãùÏù¥ Ï¢ãÏïÑ (Ïú°Ìè¨, Í∞úÍªå, ÏπòÏ¶à...)";
                case 2: return "ÏÇ∞Ï±ÖÏù¥ Ïß±! (ÏÇ∞Ï±Ö ÏóÜÏù¥ Î™ªÏÇ¥ÏïÑ!)";
                case 3: return "Ïâ¨Îäî Í≤å ÏµúÍ≥† (ÌûêÎßÅÏù¥ ÏµúÍ≥†Îã§ Î©ç!)";
                case 4: return "Ïï†Ïπ¥ Í∞ÄÏûê! (ÏπúÍµ¨Îì§Ïù¥ Ï†úÏùº Ï¢ãÏïÑ!)";
                default: return "";
            }
        };

        const getCautionTitle = (id) => {
            switch(id) {
                case 1: return "ÎßåÏßÄÎäî Í±∞ Ïã´Ïñ¥! (ÎÇòÎäî ÏòàÎØºÌï¥Ïöî)";
                case 2: return "ÏπúÍµ¨ Î¨¥ÏÑúÏõåÏöî (ÎÇòÎ•º Î≥¥Ìò∏Ìï¥Ï£ºÏÑ∏Ïöî)";
                case 3: return "ÏïåÎü¨ÏßÄÍ∞Ä ÏûàÏñ¥Ïöî (Îã§ Î®πÏùÑ Ïàò ÏóÜÏñ¥Ïöîüò¢)";
                case 4: return "ÏÜåÎ¶¨Ïóê ÎÜÄÎùºÏöî (ÎÇòÎäî ÏÜåÎ¶¨Ïóê ÎØºÍ∞êÌï¥Ïöî!)";
                default: return "";
            }
        };
        
        // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï Î∞è ÌÉÄÏù¥ÌãÄÎ°ú Î≥ÄÌôò
        const profileData = {
            ...data,
            charactor: getCharactorTitle(data.charactor || selectedCharactor),
            favorites: (data.favorites || selectedFavorite).map(getFavoriteTitle).filter(Boolean),
            cautions: (data.cautions || selectedCautions).map(getCautionTitle).filter(Boolean),
            gender: data.gender || 'male',
            imageSrc: imageSrc
        };
        
        console.log('Ï†ÑÏÜ°Ìï† ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞:', profileData);
        
        if (onProfileComplete) {
            onProfileComplete(profileData);
        }
    };

    // ÏóêÎü¨ Î©îÏãúÏßÄ Ïª¥Ìè¨ÎÑåÌä∏
    const ErrorMessage = ({ show, message }) => {
        if (!show) return null;
        return (
            <div style={{ textAlign: "center" }}>
                <span style={{ color: "#f74c26" }}>{message}</span>
            </div>
        );
    };

    return (
        <div style={{marginTop:"195px",marginBottom:"550px"}}>
            {/* Í∏∞Î≥∏Ï†ïÎ≥¥ ÏÑπÏÖò */}
            <S.TitleWrap> 
                <Text.Body1>
                    <span style={{ color: '#CE5347', fontWeight: 'bold'}}>*&nbsp;</span>
                    <S.highlight style={{ fontWeight: 'bold', fontSize: '30px'}}>Í∏∞Î≥∏Ï†ïÎ≥¥</S.highlight>
                </Text.Body1>
            </S.TitleWrap>
            
            {/* Ïù¥Î¶ÑÍ≥º Î™∏Î¨¥Í≤å */}
            <S.inputinline>
                <S.NamekgWrap style={{marginRight:'30px'}}>
                    <S.CaptionTitlewrap>ÎÇ¥ Ïù¥Î¶ÑÏùÄ,</S.CaptionTitlewrap>
                    <BasicInput 
                        type="text" 
                        placeholder="Î©çÏù¥Ïùò Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                        {...register("name", { required: true })}
                    />
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.name}
                        message={validationErrors.name}   
                    />
                </S.NamekgWrap>
                <S.NamekgWrap>
                    <S.CaptionTitlewrap>Î™∏Î¨¥Í≤å</S.CaptionTitlewrap>
                    <S.InputButtonWrapper>
                        <Text.Body3>kg</Text.Body3>
                        <BasicInput 
                            type="text" 
                            placeholder=""
                            {...register("weight", { required: true })}
                        /> 
                    </S.InputButtonWrapper>
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.weight}
                        message={validationErrors.weight}  
                    />
                </S.NamekgWrap>
            </S.inputinline>

            {/* ÏÉùÎÖÑÏõîÏùº */}
            <S.InputReguler style={{position:'relative'}}>
                <S.CaptionTitlewrap>ÏÉùÎÖÑÏõîÏùº</S.CaptionTitlewrap>
                <div style={{position:'relative', width:'100%'}}>
                    <BasicInput
                        defaultValue={selectedDate ? dayjs(selectedDate).format("YYYY-MM-DD") : ""}
                        placeholder="ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                        required
                        readOnly
                        onClick={() => calendarRef.current?.setFocus()}
                    />
                    <img 
                        src="/assets/icons/calendar.svg" 
                        width={30} height={30} alt="Ï∫òÎ¶∞Îçî" 
                        onClick={() => calendarRef.current?.setFocus()}
    
                    />
                    <Controller 
                        name="birthDate" 
                        control={control}
                        rules={{ required: "ÏÉùÎÖÑÏõîÏùºÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî" }}
                        render={({ field }) => ( 
                            <DatePickerSingle 
                                ref={calendarRef} 
                                selected={field.value} 
                                onChange={(date) => {
                                    setSelectedDate(date);
                                    setValue("birthDate", date);
                                }}
                            />
                        )}
                    /> 
                </div>
                <ErrorMessage
                    show={hasSubmitted && validationErrors.birthDate}
                    message={validationErrors.birthDate}  
                />
            </S.InputReguler>

            {/* ÏÑ±Î≥Ñ */}
            <S.InputReguler>
                <S.CaptionTitlewrap>ÏÑ±Î≥Ñ</S.CaptionTitlewrap>
                <S.inputinline style={{marginTop:"0"}}>
                    <S.NamekgWrap style={{marginRight:"30px"}}>
                        <BasicButton 
                            basicButton="small" 
                            variant={watch("gender") === "male" ? "filled" : "default"}
                            style={{width:"100%"}}
                            onClick={() => handleGenderClick('male')}>
                            ÎÇ®
                        </BasicButton>
                    </S.NamekgWrap>
                    <S.NamekgWrap>
                        <BasicButton
                            basicButton="small" 
                            variant={watch("gender") === "female" ? "filled" : "default"}
                            style={{width:"100%"}}
                            onClick={() => handleGenderClick('female')}>                                
                            Ïó¨
                        </BasicButton>
                    </S.NamekgWrap>
                </S.inputinline>
                <input
                    type='hidden'
                    {...register("gender", {
                        required:"ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.", 
                        validate: (value) => value === "male" || value === "female" || "ÏÑ±Î≥ÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî."
                    })}
                />
                <ErrorMessage
                    show={hasSubmitted && validationErrors.gender}
                    message={validationErrors.gender}  
                />
            </S.InputReguler>

            {/* Ï£ºÏÜå */}
            <S.InputReguler>
                <S.CaptionTitlewrap>Ï£ºÏÜå</S.CaptionTitlewrap>
                <div 
                    onClick={handleSearchAddress} 
                    style={{
                        width:'100%',
                        display:'flex',
                        alignItems: 'center',
                        position:'relative',
                        cursor:"pointer",
                    }}>
                    <BasicInput 
                        type="text" 
                        value={watch("address") || ""}
                        placeholder="ÎèÑÎ°úÎ™Ö Ï£ºÏÜåÎ•º Í≤ÄÏÉâÌïòÏÑ∏Ïöî"
                        readOnly
                        {...register("address", { required: "Ï£ºÏÜåÎ•º Í≤ÄÏÉâÌï¥Ï£ºÏÑ∏Ïöî" })}
                    />
                    <img 
                        src="/assets/icons/search.svg" 
                        width={30} height={30} 
                        alt="Í≤ÄÏÉâ" 
                    />
                </div>
                <ErrorMessage
                    show={hasSubmitted && validationErrors.address}
                    message={validationErrors.address}  
                />
            </S.InputReguler>

            {/* ÌíàÏ¢Ö */}
            <S.InputReguler>
                <S.CaptionTitlewrap>ÌíàÏ¢Ö</S.CaptionTitlewrap>
                <S.InputButtonWrapper>
                    <SelectBox
                        options={BREEDS}
                        placeholder="Í∞ïÏïÑÏßÄ ÌíàÏ¢ÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî."
                        {...register("breed", {required: true})}
                        onSelect={(v) => setValue("breed", v)}
                        style={{width:"100%", cursor:"pointer"}}
                    />
                </S.InputButtonWrapper>
                {watch("breed") === "Í∏∞ÌÉÄ" && (
                    <S.InputButtonWrapper style={{marginTop:"10px"}}>
                        <BasicInput
                            type="text"
                            placeholder="ÏßÅÏ†ë ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                            {...register("custombreed")}
                            style={{
                                width: "100%",
                                height: "64px",
                                padding: "20px 24px"
                            }}
                        />
                    </S.InputButtonWrapper>
                )}
                <ErrorMessage
                    show={hasSubmitted && validationErrors.breed}
                    message={validationErrors.breed}  
                />
            </S.InputReguler>

            {/* ÌîÑÎ°úÌïÑ Ïπ¥Îìú ÏÑπÏÖò */}
            <S.TitleWrap style={{marginTop:"100px"}}> 
                <Text.Body1>
                    <span style={{ color: '#CE5347', fontWeight: 'bold'}}>*&nbsp;</span>
                    <S.highlight style={{ fontWeight: 'bold', fontSize: '30px'}}>ÌîÑÎ°úÌïÑ Ïπ¥Îìú Ï†ïÎ≥¥</S.highlight>
                </Text.Body1>
            </S.TitleWrap>
            
            <S.inputinline style={{gap:"50px"}}>
                {/* ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑ */}
                <S.NamekgWrap style={{display:"flex", justifyContent:"center"}}>
                    <S.CaptionTitlewrap style={{textAlign:"center" , fontSize:"20px" , color:"#CE5347"}}>
                        Ïö∞Î¶¨ Î©çÏù¥Ïùò ÎåÄÌëú ÌîÑÎ°úÌïÑ ÏÇ¨ÏßÑÏùÑ Îì±Î°ùÌï¥Ï£ºÏÑ∏Ïöî!
                    </S.CaptionTitlewrap>
                    <S.ProfileWrap onClick={() => fileInputRef.current.click()}>
                        <S.Profile 
                            src={imageSrc || "/assets/img/progile/camera.png"} 
                        />
                    </S.ProfileWrap>
                    <BasicButton
                        roundButton="small"
                        variant="filled"
                        style={{marginTop:"60px" , }}
                        onClick={() => fileInputRef.current.click()}
                    >
                        ÏÇ¨ÏßÑ Îì±Î°ùÌïòÍ∏∞
                    </BasicButton>
                  
                    <input
                        style={{ display: "none" }}
                        type="file"
                        accept="image/*"
                        ref={fileInputRef}
                        onChange={handleImageChange}
                    />
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.profilePhoto}
                        message={validationErrors.profilePhoto}  
                    />
                </S.NamekgWrap>
                
                {/* ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ */}
                <S.NamekgWrap>
                    <S.CaptionTitlewrap>Î≥ÑÎ™Ö</S.CaptionTitlewrap>
                    <BasicInput 
                        type="text" 
                        placeholder="Í∞ÑÏãùÏöîÏ†ï"
                        {...register("nickname", { required: true })}
                        style={{marginTop:"20px"}}
                    />
                    <ErrorMessage 
                        show={hasSubmitted && validationErrors.nickname}
                        message={validationErrors.nickname}  
                    />
                    
                    <S.CaptionTitlewrap style={{margin:"70px 0 0 0"}}>Ï¢ãÏïÑÌïòÎäî Í∞ÑÏãù</S.CaptionTitlewrap>
                    <BasicInput 
                        type="text" 
                        placeholder="Ïú°Ìè¨, ÏπòÏ¶à, Ïó∞Ïñ¥ ..."
                        {...register("favoriteSnack", { required: true })}
                        style={{marginTop:"20px"}}
                    />
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.favoriteSnack}
                        message={validationErrors.favoriteSnack}  
                    />
                    
                    <S.CaptionTitlewrap style={{margin:"70px 0 0 0"}}>Ï¢ãÏïÑÌïòÎäî ÏÇ∞Ï±ÖÏΩîÏä§</S.CaptionTitlewrap>
                    <BasicInput 
                        type="text" 
                        placeholder="Ïßë Ï£ºÎ≥Ä Í≥µÏõê"
                        {...register("walkingCourse", { required: true })}
                        style={{marginTop:"20px"}}
                    />
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.walkingCourse}
                        message={validationErrors.walkingCourse}  
                    />
                    
                    <S.CaptionTitlewrap style={{margin:"70px 0 0 0"}}>ÏÉà ÏπúÍµ¨ÏóêÍ≤å ÌïúÎßàÎîî!</S.CaptionTitlewrap>
                    <BasicInput 
                        type="text" 
                        placeholder="ÏπúÍµ¨Îì§Í≥º Îõ∞Ïñ¥ ÎÜÄ Ï§ÄÎπÑ ÏôÑÎ£å!"
                        maxLength={15}
                        {...register("messageToFriend", { 
                            required: true,
                            maxLength: {
                                value: 15,
                                message: "15Í∏ÄÏûê Ïù¥ÎÇ¥Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî"
                            }
                        })}
                        style={{marginTop:"20px"}}
                    />
                    <div style={{textAlign: "right", fontSize: "12px", color: "#666", marginTop: "5px"}}>
                        {watch("messageToFriend")?.length || 0}/15
                    </div>
                    <ErrorMessage
                        show={hasSubmitted && validationErrors.messageToFriend}
                        message={validationErrors.messageToFriend}  
                    />
                </S.NamekgWrap>                
            </S.inputinline>

            {/* Í∏∞ÌÉÄ Ï†ïÎ≥¥ ÏÑπÏÖò */}
            <S.TitleWrap style={{marginTop:"100px"}}> 
                <Text.Body1>
                    <span style={{ color: '#CE5347', fontWeight: 'bold'}}>*&nbsp;</span>
                    <S.highlight style={{ fontWeight: 'bold', fontSize: '30px'}}>Í∏∞ÌÉÄ Ï†ïÎ≥¥</S.highlight>
                </Text.Body1>
            </S.TitleWrap>
            
            {/* ÏÑ±Í≤© ÏÑ†ÌÉù */}
            <S.inputinline>
                <S.CaptionTitlewrap style={{display:'flex', alignItems:'center'}}>
                    <Text.Body3><span style={{color: '#CE5347', fontWeight: 'bold' , marginRight:"10px"}}>*</span>Ïö∞Î¶¨ Î©çÏù¥Ïùò ÏÑ±Í≤©ÏùÄ?</Text.Body3>
                    <span style={{ color: '#CE5347', fontSize:'16px' ,fontWeight: 'bold', marginLeft:'10px'}}>(Îã®ÏùºÏÑ†ÌÉù)</span>
                </S.CaptionTitlewrap>
            </S.inputinline>
            
            <S.inputinlineImg>
                <S.NamekgWrap onClick={()=>selectCharactor(1)}>
                    <S.radioselect src='/assets/img/progile/personality/popularity.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÎÇòÎäî Í∞úÏù∏Ïã∏!<br/></Text.Body2>
                    <Text.Body3>ÎàÑÍµ¨ÏôÄÎèÑ Ïûò ÏßÄÎÇ¥Ïöî</Text.Body3>
                    <Radio checked={selectedCharactor === 1} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={()=>selectCharactor(2)}>
                    <S.radioselect src='/assets/img/progile/personality/leader.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÎÇòÎ•º Îî∞Î•¥Îùº!<br/></Text.Body2>
                    <Text.Body3>Í∞ÄÎßåÌûà ÏûàÏßÄ Î™ªÌï¥Ïöî!</Text.Body3>
                    <Radio checked={selectedCharactor === 2} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={()=>selectCharactor(3)}>
                    <S.radioselect src='/assets/img/progile/personality/attractiveness.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÎÇòÎûëÎßå ÏûàÏñ¥Ï§ò...<br/></Text.Body2>
                    <Text.Body3>Ïï†Ï∞©ÌòïÏù¥Í≥† Ïï†ÍµêÍ∞Ä ÎßéÏïÑÏöî</Text.Body3>
                    <Radio checked={selectedCharactor === 3} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={()=>selectCharactor(4)}>
                    <S.radioselect src='/assets/img/progile/personality/shy.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>Ï°∞Í∏à Ï°∞Ïã¨Ïä§ÎüΩÍ∞ú!<br/></Text.Body2>
                    <Text.Body3>ÏàòÏ§çÏùåÏù¥ ÎßéÏïÑÏöî</Text.Body3>
                    <Radio checked={selectedCharactor === 4} size="M" mt="20"/>
                </S.NamekgWrap>
            </S.inputinlineImg>
            
            <input
                type='hidden'
                {...register("charactor", {
                    required:"Î©çÏù¥Ïùò ÏÑ±Í≤©ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî", 
                    validate: (value) => {
                        const validOptions = [1, 2, 3, 4];
                        return validOptions.includes(value) || "Î©çÏù¥Ïùò ÏÑ±Í≤©ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî"
                    }
                })}
            />

            {/* Ï¢ãÏïÑÌïòÎäî Í≤É ÏÑ†ÌÉù */}
            <S.inputinline>
                <S.CaptionTitlewrap style={{display:'flex', alignItems:'center'}}>
                    <Text.Body3><span style={{color: '#CE5347', fontWeight: 'bold' , marginRight:"10px"}}>*</span>Ïö∞Î¶¨ Î©çÏù¥Í∞Ä Ï¢ãÏïÑÌïòÎäî Í≤ÉÏùÄ?</Text.Body3>
                    <span style={{ color: '#CE5347', fontSize:'16px' ,fontWeight: 'bold', marginLeft:'10px'}}>(Îã§Ï§ëÏÑ†ÌÉùÍ∞ÄÎä•)</span>
                </S.CaptionTitlewrap>
            </S.inputinline>
            
            <S.inputinlineImg>
                <S.NamekgWrap onClick={() => selectFavorite(1)}>
                    <S.radioselect src='/assets/img/progile/favoriteThing/snack.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>Í∞ÑÏãùÏù¥ Ï¢ãÏïÑ<br/></Text.Body2>
                    <Text.Body3>Ïú°Ìè¨, Í∞úÍªå, ÏπòÏ¶à...</Text.Body3>
                    <Checkbox checked={selectedFavorite.includes(1)} size="L" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectFavorite(2)}>
                    <S.radioselect src='/assets/img/progile/favoriteThing/walk.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÏÇ∞Ï±ÖÏù¥ Ïß±!<br/></Text.Body2>
                    <Text.Body3>ÏÇ∞Ï±Ö ÏóÜÏù¥ Î™ªÏÇ¥ÏïÑ!</Text.Body3>
                    <Checkbox checked={selectedFavorite.includes(2)} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectFavorite(3)}>
                    <S.radioselect src='/assets/img/progile/favoriteThing/healing.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>Ïâ¨Îäî Í≤å ÏµúÍ≥†<br/></Text.Body2>
                    <Text.Body3>ÌûêÎßÅÏù¥ ÏµúÍ≥†Îã§ Î©ç!</Text.Body3>
                    <Checkbox checked={selectedFavorite.includes(3)} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectFavorite(4)}>
                    <S.radioselect src='/assets/img/progile/favoriteThing/friend.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>Ïï†Ïπ¥ Í∞ÄÏûê!<br/></Text.Body2>
                    <Text.Body3>ÏπúÍµ¨Îì§Ïù¥ Ï†úÏùº Ï¢ãÏïÑ!</Text.Body3>
                    <Checkbox checked={selectedFavorite.includes(4)} size="M" mt="20"/>
                </S.NamekgWrap>
            </S.inputinlineImg>

            {/* Ï£ºÏùòÌï† Ï†ê ÏÑ†ÌÉù */}
            <S.inputinline>
                <S.CaptionTitlewrap style={{display:'flex', alignItems:'center'}}>
                    <Text.Body3><span style={{color: '#CE5347', fontWeight: 'bold' , marginRight:"10px"}}>*</span>Ï£ºÏùòÌï¥ Ï£ºÏÑ∏Ïöî!</Text.Body3>
                    <span style={{ color: '#CE5347', fontSize:'16px' ,fontWeight: 'bold', marginLeft:'10px'}}>(Îã§Ï§ëÏÑ†ÌÉùÍ∞ÄÎä•)</span>
                </S.CaptionTitlewrap>
            </S.inputinline>

                        <S.inputinlineImg>
                <S.NamekgWrap onClick={() => selectCautions(1)}>
                    <S.radioselect src='/assets/img/progile/Caution/touch.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÎßåÏßÄÎäî Í±∞ Ïã´Ïñ¥!<br/></Text.Body2>
                    <Text.Body3>ÎÇòÎäî ÏòàÎØºÌï¥Ïöî</Text.Body3>
                    <Checkbox checked={selectedCautions.includes(1)} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectCautions(2)}>
                    <S.radioselect src='/assets/img/progile/Caution/bark.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÏπúÍµ¨ Î¨¥ÏÑúÏõåÏöî<br/></Text.Body2>
                    <Text.Body3>ÎÇòÎ•º Î≥¥Ìò∏Ìï¥Ï£ºÏÑ∏Ïöî</Text.Body3>
                    <Checkbox checked={selectedCautions.includes(2)} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectCautions(3)}>
                    <S.radioselect src='/assets/img/progile/Caution/Allergy.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÏïåÎü¨ÏßÄÍ∞Ä ÏûàÏñ¥Ïöî<br/></Text.Body2>
                    <Text.Body3>Îã§ Î®πÏùÑ Ïàò ÏóÜÏñ¥Ïöîüò¢</Text.Body3>
                    <Checkbox checked={selectedCautions.includes(3)} size="M" mt="20"/>
                </S.NamekgWrap>
                <S.NamekgWrap onClick={() => selectCautions(4)}>
                    <S.radioselect src='/assets/img/progile/Caution/sound.png'></S.radioselect>
                    <Text.Body2 style={{textAlign:"center", margin:"10px 0 6px 0", fontWeight:"bold"}}>ÏÜåÎ¶¨Ïóê ÎÜÄÎùºÏöî<br/></Text.Body2>
                    <Text.Body3>ÎÇòÎäî ÏÜåÎ¶¨Ïóê ÎØºÍ∞êÌï¥Ïöî!</Text.Body3>
                    <Checkbox checked={selectedCautions.includes(4)} size="M" mt="20"/>
                </S.NamekgWrap>
            </S.inputinlineImg>

            {/* ÏÑ†ÌÉù Ï†ïÎ≥¥ - Ï§ëÏÑ±Ìôî */}
            <S.CaptionTitlewrap style={{marginTop:"100px"}}>
                <Text.Body1>
                    <S.highlight style={{ fontWeight: 'bold'}}>Ï§ëÏÑ±Ìôî Ïó¨Î∂Ä</S.highlight>
                    <span style={{ color: '#CE5347', fontSize:'16px' ,fontWeight: 'bold', marginLeft:'10px'}}>(ÏÑ†ÌÉùÏÇ¨Ìï≠)</span>
                </Text.Body1>
            </S.CaptionTitlewrap>
            
            <S.inputinline style={{display:"flex", alignItems:"center"}}>
                <S.NamekgWrap style={{marginRight:'30px'}}>
                    <BasicButton 
                        basicButton="small" 
                        variant={watch("neutralization") === "yes" ? "filled" : "default"}
                        style={{width:"100%"}}
                        onClick={() => setValue("neutralization", "yes")}>
                        Ïú†
                    </BasicButton>
                </S.NamekgWrap>
                <S.NamekgWrap>
                    <BasicButton 
                        basicButton="small" 
                        variant={watch("neutralization") === "none" ? "filled" : "default"}
                        style={{width:"100%"}}
                        onClick={() => setValue("neutralization", "none")}>
                        Î¨¥
                    </BasicButton>
                </S.NamekgWrap>
            </S.inputinline>

            {/* Ï†úÏ∂ú Î≤ÑÌäº */}
            <S.InputReguler onSubmit={handleFormSubmit} style={{marginTop:"182px"}}>
                <BasicButton 
                    basicButton="superSmall" 
                    variant="filled"
                    style={{width:"200px", cursor:'pointer'}}
                    onClick={handleSubmit(handleFormSubmit)}
                    type='submit'
                    disabled={isSubmitting}>
                    Îã§Ïùå
                </BasicButton>
            </S.InputReguler>
        </div>
    );
};

export default AddProfile;